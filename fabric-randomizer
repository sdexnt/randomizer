diff --git a/common/channelconfig/api.go b/common/channelconfig/api.go
index 4acd7490f..226399469 100644
--- a/common/channelconfig/api.go
+++ b/common/channelconfig/api.go
@@ -32,6 +32,7 @@ type ApplicationOrg interface {
 
 	// AnchorPeers returns the list of gossip anchor peers
 	AnchorPeers() []*pb.AnchorPeer
+	Endorsers() []*pb.Endorser // add nikulin.s
 }
 
 // OrdererOrg stores the per org orderer config.
diff --git a/common/channelconfig/applicationorg.go b/common/channelconfig/applicationorg.go
index f71d3987b..536e13840 100644
--- a/common/channelconfig/applicationorg.go
+++ b/common/channelconfig/applicationorg.go
@@ -17,11 +17,14 @@ import (
 const (
 	// AnchorPeersKey is the key name for the AnchorPeers ConfigValue
 	AnchorPeersKey = "AnchorPeers"
+	// EndorsersKey is the key name for the Endorsers ConfigValue
+	EndorsersKey = "Endorsers"
 )
 
 // ApplicationOrgProtos are deserialized from the config
 type ApplicationOrgProtos struct {
 	AnchorPeers *pb.AnchorPeers
+	Endorsers   *pb.Endorsers     // add nikulin.s
 }
 
 // ApplicationOrgConfig defines the configuration for an application org
@@ -66,6 +69,11 @@ func (aog *ApplicationOrgConfig) AnchorPeers() []*pb.AnchorPeer {
 	return aog.protos.AnchorPeers.AnchorPeers
 }
 
+// Endorsers returns the list of endorsers of this Organization
+func (aog *ApplicationOrgConfig) Endorsers() []*pb.Endorser {      // add nikulin.s
+	return aog.protos.Endorsers.Endorsers
+}
+
 func (aoc *ApplicationOrgConfig) Validate() error {
 	logger.Debugf("Anchor peers for org %s are %v", aoc.name, aoc.protos.AnchorPeers)
 	return aoc.OrganizationConfig.Validate()
diff --git a/common/channelconfig/util.go b/common/channelconfig/util.go
index 2459f982f..549b3da77 100644
--- a/common/channelconfig/util.go
+++ b/common/channelconfig/util.go
@@ -208,6 +208,16 @@ func AnchorPeersValue(anchorPeers []*pb.AnchorPeer) *StandardConfigValue {
 	}
 }
 
+// add nikulin.s
+// EndorsersValue returns the config definition for an org's endorsers.
+// It is a value for the /Channel/Application/*.
+func EndorsersValue(endorsers []*pb.Endorser) *StandardConfigValue {
+	return &StandardConfigValue{
+		key:   EndorsersKey,
+		value: &pb.Endorsers{Endorsers: endorsers},
+	}
+}
+
 // ChannelCreationPolicyValue returns the config definition for a consortium's channel creation policy
 // It is a value for the /Channel/Consortiums/*/*.
 func ChannelCreationPolicyValue(policy *cb.Policy) *StandardConfigValue {
diff --git a/common/configtx/test/helper.go b/common/configtx/test/helper.go
index d82455a24..81bacc126 100644
--- a/common/configtx/test/helper.go
+++ b/common/configtx/test/helper.go
@@ -69,6 +69,12 @@ func MakeGenesisBlockFromMSPs(chainID string, appMSPConf, ordererMSPConf *msppro
 		ModPolicy: channelconfig.AdminsPolicyKey,
 	}
 
+	// add nikulin.s
+	applicationOrg.Values[channelconfig.EndorsersKey] = &cb.ConfigValue{
+		Value:     utils.MarshalOrPanic(channelconfig.EndorsersValue([]*pb.Endorser{}).Value()),
+		ModPolicy: channelconfig.AdminsPolicyKey,
+	}
+
 	channelGroup.Groups[channelconfig.OrdererGroupKey].Groups[ordererOrgID] = ordererOrg
 	channelGroup.Groups[channelconfig.ApplicationGroupKey].Groups[appOrgID] = applicationOrg
 
diff --git a/common/tools/configtxgen/encoder/encoder.go b/common/tools/configtxgen/encoder/encoder.go
index 7aea4ca3f..3d73e3c52 100644
--- a/common/tools/configtxgen/encoder/encoder.go
+++ b/common/tools/configtxgen/encoder/encoder.go
@@ -7,6 +7,8 @@ SPDX-License-Identifier: Apache-2.0
 package encoder
 
 import (
+	"fmt"
+
 	"github.com/hyperledger/fabric/common/cauthdsl"
 	"github.com/hyperledger/fabric/common/channelconfig"
 	"github.com/hyperledger/fabric/common/crypto"
@@ -358,6 +360,24 @@ func NewApplicationOrgGroup(conf *genesisconfig.Organization) (*cb.ConfigGroup,
 		addValue(applicationOrgGroup, channelconfig.AnchorPeersValue(anchorProtos), channelconfig.AdminsPolicyKey)
 	}
 
+	/************* begin add nikulin.s ************/
+
+	fmt.Printf("endorsers count: %d\n", len(conf.Endorsers))
+
+	var endorsersProtos []*pb.Endorser
+	for _, endorser := range conf.Endorsers {
+		fmt.Printf("endorser address: %s\n", endorser.Address)
+		endorsersProtos = append(endorsersProtos, &pb.Endorser{
+			Address: endorser.Address,
+		})
+	}
+
+	if len(endorsersProtos) > 0 {
+		addValue(applicationOrgGroup, channelconfig.EndorsersValue(endorsersProtos), channelconfig.AdminsPolicyKey)
+	}
+
+	/************** end add nikulin.s *************/
+
 	applicationOrgGroup.ModPolicy = channelconfig.AdminsPolicyKey
 	return applicationOrgGroup, nil
 }
diff --git a/common/tools/configtxgen/localconfig/config.go b/common/tools/configtxgen/localconfig/config.go
index fcb32728b..d6ee199a5 100644
--- a/common/tools/configtxgen/localconfig/config.go
+++ b/common/tools/configtxgen/localconfig/config.go
@@ -139,6 +139,7 @@ type Organization struct {
 	// embedding of types, so we use one organization struct
 	// for both orderers and applications.
 	AnchorPeers      []*AnchorPeer `yaml:"AnchorPeers"`
+	Endorsers        []*Endorser   `yaml:"Endorsers"`
 	OrdererEndpoints []string      `yaml:"OrdererEndpoints"`
 
 	// AdminPrincipal is deprecated and may be removed in a future release
@@ -153,6 +154,15 @@ type AnchorPeer struct {
 	Port int    `yaml:"Port"`
 }
 
+/********** Endorsers adding begin **********/
+
+// Endorser encodes the necessary fields to identify an endorsing peer.
+type Endorser struct {
+	Address string `yaml:"Address"`
+}
+
+/*********** Endorsers adding end ***********/
+
 // Orderer contains configuration which is used for the
 // bootstrapping of an orderer by the provisional bootstrapper.
 type Orderer struct {
diff --git a/common/tools/configtxgen/main.go b/common/tools/configtxgen/main.go
index cf195a132..0254aa2f6 100644
--- a/common/tools/configtxgen/main.go
+++ b/common/tools/configtxgen/main.go
@@ -99,6 +99,14 @@ func doOutputAnchorPeersUpdate(conf *genesisconfig.Profile, channelID string, ou
 		}
 	}
 
+	// add nikulin.s
+	endorsers := make([]*pb.Endorser, len(org.Endorsers))
+	for i, endorser := range org.Endorsers {
+		endorsers[i] = &pb.Endorser{
+			Address: endorser.Address,
+		}
+	}
+
 	configUpdate := &cb.ConfigUpdate{
 		ChannelId: channelID,
 		WriteSet:  cb.NewConfigGroup(),
@@ -126,10 +134,16 @@ func doOutputAnchorPeersUpdate(conf *genesisconfig.Profile, channelID string, ou
 	configUpdate.WriteSet.Groups[channelconfig.ApplicationGroupKey].Groups[org.Name].Policies[channelconfig.ReadersPolicyKey] = &cb.ConfigPolicy{}
 	configUpdate.WriteSet.Groups[channelconfig.ApplicationGroupKey].Groups[org.Name].Policies[channelconfig.WritersPolicyKey] = &cb.ConfigPolicy{}
 	configUpdate.WriteSet.Groups[channelconfig.ApplicationGroupKey].Groups[org.Name].Policies[channelconfig.AdminsPolicyKey] = &cb.ConfigPolicy{}
+
 	configUpdate.WriteSet.Groups[channelconfig.ApplicationGroupKey].Groups[org.Name].Values[channelconfig.AnchorPeersKey] = &cb.ConfigValue{
 		Value:     utils.MarshalOrPanic(channelconfig.AnchorPeersValue(anchorPeers).Value()),
 		ModPolicy: channelconfig.AdminsPolicyKey,
 	}
+	// add nikulin.s
+	configUpdate.WriteSet.Groups[channelconfig.ApplicationGroupKey].Groups[org.Name].Values[channelconfig.EndorsersKey] = &cb.ConfigValue{
+		Value:     utils.MarshalOrPanic(channelconfig.EndorsersValue(endorsers).Value()),
+		ModPolicy: channelconfig.AdminsPolicyKey,
+	}
 
 	configUpdateEnvelope := &cb.ConfigUpdateEnvelope{
 		ConfigUpdate: utils.MarshalOrPanic(configUpdate),
diff --git a/gossip/service/eventer.go b/gossip/service/eventer.go
index 6dd6eb77c..2e13262b3 100644
--- a/gossip/service/eventer.go
+++ b/gossip/service/eventer.go
@@ -47,6 +47,7 @@ type ConfigProcessor interface {
 
 type configStore struct {
 	anchorPeers []*peer.AnchorPeer
+	endorsers   []*peer.Endorser // add nikulin.s
 	orgMap      map[string]channelconfig.ApplicationOrg
 }
 
@@ -73,6 +74,10 @@ func newConfigEventer(receiver configEventReceiver) *configEventer {
 func (ce *configEventer) ProcessConfigUpdate(config Config) {
 	logger.Debugf("Processing new config for channel %s", config.ChainID())
 	orgMap := cloneOrgConfig(config.ApplicationOrgs())
+
+	// begin test nasa
+	logger.Infof("Begin DeepEqual for channel %s", config.ChainID())
+
 	if ce.lastConfig != nil && reflect.DeepEqual(ce.lastConfig.orgMap, orgMap) {
 		logger.Debugf("Ignoring new config for channel %s because it contained no anchor peer updates", config.ChainID())
 	} else {
@@ -82,9 +87,16 @@ func (ce *configEventer) ProcessConfigUpdate(config Config) {
 			newAnchorPeers = append(newAnchorPeers, group.AnchorPeers()...)
 		}
 
+		// add nikulin.s
+		var newEndorsers []*peer.Endorser
+		for _, group := range config.ApplicationOrgs() {
+			newEndorsers = append(newEndorsers, group.Endorsers()...)
+		}
+
 		newConfig := &configStore{
 			orgMap:      orgMap,
 			anchorPeers: newAnchorPeers,
+			endorsers:   newEndorsers,
 		}
 		ce.lastConfig = newConfig
 
@@ -106,6 +118,7 @@ func cloneOrgConfig(src map[string]channelconfig.ApplicationOrg) map[string]chan
 			name:        v.Name(),
 			mspID:       v.MSPID(),
 			anchorPeers: v.AnchorPeers(),
+			endorsers:   v.Endorsers(),
 		}
 	}
 	return clone
@@ -115,6 +128,7 @@ type appGrp struct {
 	name        string
 	mspID       string
 	anchorPeers []*peer.AnchorPeer
+	endorsers   []*peer.Endorser
 }
 
 func (ag *appGrp) Name() string {
@@ -128,3 +142,8 @@ func (ag *appGrp) MSPID() string {
 func (ag *appGrp) AnchorPeers() []*peer.AnchorPeer {
 	return ag.anchorPeers
 }
+
+// add nikulin.s
+func (ag *appGrp) Endorsers() []*peer.Endorser {
+	return ag.endorsers
+}
diff --git a/protos/peer/configuration.pb.go b/protos/peer/configuration.pb.go
index 51bef4f0d..617932f96 100644
--- a/protos/peer/configuration.pb.go
+++ b/protos/peer/configuration.pb.go
@@ -1,11 +1,14 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
-// source: peer/configuration.proto
+// source: configuration.proto
 
-package peer // import "github.com/hyperledger/fabric/protos/peer"
+package peer
 
-import proto "github.com/golang/protobuf/proto"
-import fmt "fmt"
-import math "math"
+import (
+	fmt "fmt"
+	math "math"
+
+	proto "github.com/golang/protobuf/proto"
+)
 
 // Reference imports to suppress errors if they are not otherwise used.
 var _ = proto.Marshal
@@ -30,16 +33,17 @@ func (m *AnchorPeers) Reset()         { *m = AnchorPeers{} }
 func (m *AnchorPeers) String() string { return proto.CompactTextString(m) }
 func (*AnchorPeers) ProtoMessage()    {}
 func (*AnchorPeers) Descriptor() ([]byte, []int) {
-	return fileDescriptor_configuration_d9ec63ae33c182ef, []int{0}
+	return fileDescriptor_415c9e57263f32ab, []int{0}
 }
+
 func (m *AnchorPeers) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_AnchorPeers.Unmarshal(m, b)
 }
 func (m *AnchorPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
 	return xxx_messageInfo_AnchorPeers.Marshal(b, m, deterministic)
 }
-func (dst *AnchorPeers) XXX_Merge(src proto.Message) {
-	xxx_messageInfo_AnchorPeers.Merge(dst, src)
+func (m *AnchorPeers) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_AnchorPeers.Merge(m, src)
 }
 func (m *AnchorPeers) XXX_Size() int {
 	return xxx_messageInfo_AnchorPeers.Size(m)
@@ -73,16 +77,17 @@ func (m *AnchorPeer) Reset()         { *m = AnchorPeer{} }
 func (m *AnchorPeer) String() string { return proto.CompactTextString(m) }
 func (*AnchorPeer) ProtoMessage()    {}
 func (*AnchorPeer) Descriptor() ([]byte, []int) {
-	return fileDescriptor_configuration_d9ec63ae33c182ef, []int{1}
+	return fileDescriptor_415c9e57263f32ab, []int{1}
 }
+
 func (m *AnchorPeer) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_AnchorPeer.Unmarshal(m, b)
 }
 func (m *AnchorPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
 	return xxx_messageInfo_AnchorPeer.Marshal(b, m, deterministic)
 }
-func (dst *AnchorPeer) XXX_Merge(src proto.Message) {
-	xxx_messageInfo_AnchorPeer.Merge(dst, src)
+func (m *AnchorPeer) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_AnchorPeer.Merge(m, src)
 }
 func (m *AnchorPeer) XXX_Size() int {
 	return xxx_messageInfo_AnchorPeer.Size(m)
@@ -107,6 +112,87 @@ func (m *AnchorPeer) GetPort() int32 {
 	return 0
 }
 
+// Endorsers simply represents list of endorsing peers which is used in ConfigurationItem
+type Endorsers struct {
+	Endorsers            []*Endorser `protobuf:"bytes,1,rep,name=endorsers,proto3" json:"endorsers,omitempty"`
+	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
+	XXX_unrecognized     []byte      `json:"-"`
+	XXX_sizecache        int32       `json:"-"`
+}
+
+func (m *Endorsers) Reset()         { *m = Endorsers{} }
+func (m *Endorsers) String() string { return proto.CompactTextString(m) }
+func (*Endorsers) ProtoMessage()    {}
+func (*Endorsers) Descriptor() ([]byte, []int) {
+	return fileDescriptor_415c9e57263f32ab, []int{2}
+}
+
+func (m *Endorsers) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_Endorsers.Unmarshal(m, b)
+}
+func (m *Endorsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_Endorsers.Marshal(b, m, deterministic)
+}
+func (m *Endorsers) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_Endorsers.Merge(m, src)
+}
+func (m *Endorsers) XXX_Size() int {
+	return xxx_messageInfo_Endorsers.Size(m)
+}
+func (m *Endorsers) XXX_DiscardUnknown() {
+	xxx_messageInfo_Endorsers.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_Endorsers proto.InternalMessageInfo
+
+func (m *Endorsers) GetEndorsers() []*Endorser {
+	if m != nil {
+		return m.Endorsers
+	}
+	return nil
+}
+
+// Endorser message structure which provides information about endorser, it includes host address.
+type Endorser struct {
+	// DNS host name of the endorser
+	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *Endorser) Reset()         { *m = Endorser{} }
+func (m *Endorser) String() string { return proto.CompactTextString(m) }
+func (*Endorser) ProtoMessage()    {}
+func (*Endorser) Descriptor() ([]byte, []int) {
+	return fileDescriptor_415c9e57263f32ab, []int{3}
+}
+
+func (m *Endorser) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_Endorser.Unmarshal(m, b)
+}
+func (m *Endorser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_Endorser.Marshal(b, m, deterministic)
+}
+func (m *Endorser) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_Endorser.Merge(m, src)
+}
+func (m *Endorser) XXX_Size() int {
+	return xxx_messageInfo_Endorser.Size(m)
+}
+func (m *Endorser) XXX_DiscardUnknown() {
+	xxx_messageInfo_Endorser.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_Endorser proto.InternalMessageInfo
+
+func (m *Endorser) GetAddress() string {
+	if m != nil {
+		return m.Address
+	}
+	return ""
+}
+
 // APIResource represents an API resource in the peer whose ACL
 // is determined by the policy_ref field
 type APIResource struct {
@@ -120,16 +206,17 @@ func (m *APIResource) Reset()         { *m = APIResource{} }
 func (m *APIResource) String() string { return proto.CompactTextString(m) }
 func (*APIResource) ProtoMessage()    {}
 func (*APIResource) Descriptor() ([]byte, []int) {
-	return fileDescriptor_configuration_d9ec63ae33c182ef, []int{2}
+	return fileDescriptor_415c9e57263f32ab, []int{4}
 }
+
 func (m *APIResource) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_APIResource.Unmarshal(m, b)
 }
 func (m *APIResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
 	return xxx_messageInfo_APIResource.Marshal(b, m, deterministic)
 }
-func (dst *APIResource) XXX_Merge(src proto.Message) {
-	xxx_messageInfo_APIResource.Merge(dst, src)
+func (m *APIResource) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_APIResource.Merge(m, src)
 }
 func (m *APIResource) XXX_Size() int {
 	return xxx_messageInfo_APIResource.Size(m)
@@ -160,16 +247,17 @@ func (m *ACLs) Reset()         { *m = ACLs{} }
 func (m *ACLs) String() string { return proto.CompactTextString(m) }
 func (*ACLs) ProtoMessage()    {}
 func (*ACLs) Descriptor() ([]byte, []int) {
-	return fileDescriptor_configuration_d9ec63ae33c182ef, []int{3}
+	return fileDescriptor_415c9e57263f32ab, []int{5}
 }
+
 func (m *ACLs) XXX_Unmarshal(b []byte) error {
 	return xxx_messageInfo_ACLs.Unmarshal(m, b)
 }
 func (m *ACLs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
 	return xxx_messageInfo_ACLs.Marshal(b, m, deterministic)
 }
-func (dst *ACLs) XXX_Merge(src proto.Message) {
-	xxx_messageInfo_ACLs.Merge(dst, src)
+func (m *ACLs) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_ACLs.Merge(m, src)
 }
 func (m *ACLs) XXX_Size() int {
 	return xxx_messageInfo_ACLs.Size(m)
@@ -190,34 +278,36 @@ func (m *ACLs) GetAcls() map[string]*APIResource {
 func init() {
 	proto.RegisterType((*AnchorPeers)(nil), "protos.AnchorPeers")
 	proto.RegisterType((*AnchorPeer)(nil), "protos.AnchorPeer")
+	proto.RegisterType((*Endorsers)(nil), "protos.Endorsers")
+	proto.RegisterType((*Endorser)(nil), "protos.Endorser")
 	proto.RegisterType((*APIResource)(nil), "protos.APIResource")
 	proto.RegisterType((*ACLs)(nil), "protos.ACLs")
 	proto.RegisterMapType((map[string]*APIResource)(nil), "protos.ACLs.AclsEntry")
 }
 
-func init() {
-	proto.RegisterFile("peer/configuration.proto", fileDescriptor_configuration_d9ec63ae33c182ef)
-}
-
-var fileDescriptor_configuration_d9ec63ae33c182ef = []byte{
-	// 295 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xdf, 0x4b, 0xfb, 0x30,
-	0x14, 0xc5, 0xe9, 0x7e, 0x7c, 0x61, 0xb7, 0xdf, 0x07, 0x89, 0x20, 0x45, 0x10, 0x46, 0x9f, 0x36,
-	0x91, 0x14, 0xa6, 0x82, 0xf8, 0x56, 0xa7, 0x0f, 0xc2, 0xc0, 0x91, 0x47, 0x5f, 0x46, 0x16, 0x6f,
-	0x7f, 0x60, 0x6d, 0xca, 0x4d, 0x2a, 0xf4, 0xcd, 0x3f, 0x5d, 0x9a, 0x6c, 0xab, 0x4f, 0x39, 0x39,
-	0xf9, 0x9c, 0xcb, 0x21, 0x17, 0xa2, 0x06, 0x91, 0x12, 0xa5, 0xeb, 0xac, 0xcc, 0x5b, 0x92, 0xb6,
-	0xd4, 0x35, 0x6f, 0x48, 0x5b, 0xcd, 0xfe, 0xb9, 0xc3, 0xc4, 0xcf, 0x10, 0xa6, 0xb5, 0x2a, 0x34,
-	0x6d, 0x11, 0xc9, 0xb0, 0x7b, 0xf8, 0x2f, 0xdd, 0x75, 0xd7, 0x27, 0x4d, 0x14, 0xcc, 0xc7, 0x8b,
-	0x70, 0xc5, 0x7c, 0xc8, 0xf0, 0x01, 0x15, 0xa1, 0x1c, 0x62, 0xf1, 0x1d, 0xc0, 0xf0, 0xc4, 0x18,
-	0x4c, 0x0a, 0x6d, 0x6c, 0x14, 0xcc, 0x83, 0xc5, 0x4c, 0x38, 0xdd, 0x7b, 0x8d, 0x26, 0x1b, 0x8d,
-	0xe6, 0xc1, 0x62, 0x2a, 0x9c, 0x8e, 0x6f, 0x20, 0x4c, 0xb7, 0xaf, 0x02, 0x8d, 0x6e, 0x49, 0x21,
-	0xbb, 0x02, 0x68, 0x74, 0x55, 0xaa, 0x6e, 0x47, 0x98, 0x1d, 0xc2, 0x33, 0xef, 0x08, 0xcc, 0xe2,
-	0x9f, 0x00, 0x26, 0xe9, 0x7a, 0x63, 0xd8, 0x35, 0x4c, 0xa4, 0xaa, 0x8e, 0xdd, 0x2e, 0x4e, 0xdd,
-	0xd6, 0x1b, 0xc3, 0x53, 0x55, 0x99, 0x97, 0xda, 0x52, 0x27, 0x1c, 0x73, 0xb9, 0x81, 0xd9, 0xc9,
-	0x62, 0x67, 0x30, 0xfe, 0xc4, 0xee, 0x30, 0xb9, 0x97, 0x6c, 0x09, 0xd3, 0x6f, 0x59, 0xb5, 0xe8,
-	0x6a, 0x85, 0xab, 0xf3, 0xd3, 0xac, 0xa1, 0x96, 0xf0, 0xc4, 0xe3, 0xe8, 0x21, 0x78, 0x7a, 0x83,
-	0x58, 0x53, 0xce, 0x8b, 0xae, 0x41, 0xaa, 0xf0, 0x23, 0x47, 0xe2, 0x99, 0xdc, 0x53, 0xa9, 0x8e,
-	0xb9, 0xfe, 0xd3, 0xde, 0x97, 0x79, 0x69, 0x8b, 0x76, 0xcf, 0x95, 0xfe, 0x4a, 0xfe, 0xa0, 0x89,
-	0x47, 0x13, 0x8f, 0x26, 0x3d, 0xba, 0xf7, 0x5b, 0xb8, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xae,
-	0x0a, 0x1d, 0x41, 0xa8, 0x01, 0x00, 0x00,
+func init() { proto.RegisterFile("configuration.proto", fileDescriptor_415c9e57263f32ab) }
+
+var fileDescriptor_415c9e57263f32ab = []byte{
+	// 331 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x4b, 0xf3, 0x40,
+	0x10, 0xc6, 0x49, 0x3f, 0xde, 0xd7, 0x4c, 0x3c, 0x94, 0x2d, 0x48, 0x10, 0x84, 0x12, 0x3c, 0xb4,
+	0x22, 0x1b, 0xa8, 0x0a, 0xa2, 0xa7, 0x58, 0x7b, 0x10, 0x0a, 0x96, 0x3d, 0x7a, 0x29, 0xdb, 0xcd,
+	0xe6, 0x03, 0x63, 0x36, 0xcc, 0x26, 0x42, 0x6e, 0xfe, 0xe9, 0x92, 0x8f, 0x6d, 0x3c, 0x65, 0x9e,
+	0x27, 0xbf, 0xd9, 0x67, 0x86, 0x81, 0xb9, 0x50, 0x79, 0x94, 0xc6, 0x15, 0xf2, 0x32, 0x55, 0x39,
+	0x2d, 0x50, 0x95, 0x8a, 0xfc, 0x6b, 0x3f, 0xda, 0x7b, 0x05, 0x27, 0xc8, 0x45, 0xa2, 0x70, 0x2f,
+	0x25, 0x6a, 0xf2, 0x00, 0xe7, 0xbc, 0x95, 0x87, 0xa2, 0xd1, 0xae, 0xb5, 0x18, 0x2f, 0x9d, 0x35,
+	0xe9, 0x9a, 0x34, 0x1d, 0x50, 0xe6, 0xf0, 0xa1, 0xcd, 0xbb, 0x07, 0x18, 0x7e, 0x11, 0x02, 0x93,
+	0x44, 0xe9, 0xd2, 0xb5, 0x16, 0xd6, 0xd2, 0x66, 0x6d, 0xdd, 0x78, 0x85, 0xc2, 0xd2, 0x1d, 0x2d,
+	0xac, 0xe5, 0x94, 0xb5, 0xb5, 0xf7, 0x0c, 0xf6, 0x36, 0x0f, 0x15, 0xea, 0x26, 0x99, 0x82, 0x2d,
+	0x8d, 0xe8, 0x63, 0x67, 0x26, 0xd6, 0x50, 0x6c, 0x40, 0xbc, 0x6b, 0x38, 0x33, 0x36, 0x71, 0xe1,
+	0x3f, 0x0f, 0x43, 0x94, 0x5a, 0xf7, 0x99, 0x46, 0x7a, 0xb7, 0xe0, 0x04, 0xfb, 0x37, 0x26, 0xb5,
+	0xaa, 0x50, 0x48, 0x72, 0x05, 0x50, 0xa8, 0x2c, 0x15, 0xf5, 0x01, 0x65, 0xd4, 0xb3, 0x76, 0xe7,
+	0x30, 0x19, 0x79, 0x3f, 0x16, 0x4c, 0x82, 0xcd, 0x4e, 0x93, 0x1b, 0x98, 0x70, 0x91, 0x99, 0x39,
+	0x2e, 0x4e, 0xeb, 0x6f, 0x76, 0x9a, 0x06, 0x22, 0xd3, 0xdb, 0xbc, 0xc4, 0x9a, 0xb5, 0xcc, 0xe5,
+	0x0e, 0xec, 0x93, 0x45, 0x66, 0x30, 0xfe, 0x94, 0x75, 0xff, 0x72, 0x53, 0x92, 0x15, 0x4c, 0xbf,
+	0x79, 0x56, 0xc9, 0x76, 0x73, 0x67, 0x3d, 0x3f, 0xbd, 0x35, 0x8c, 0xc5, 0x3a, 0xe2, 0x69, 0xf4,
+	0x68, 0xbd, 0xbc, 0x83, 0xa7, 0x30, 0xa6, 0x49, 0x5d, 0x48, 0xcc, 0x64, 0x18, 0x4b, 0xa4, 0x11,
+	0x3f, 0x62, 0x2a, 0x4c, 0x5f, 0x73, 0x97, 0x8f, 0x55, 0x9c, 0x96, 0x49, 0x75, 0xa4, 0x42, 0x7d,
+	0xf9, 0x7f, 0x50, 0xbf, 0x43, 0xfd, 0x0e, 0xf5, 0x1b, 0xf4, 0xd8, 0x1d, 0xfa, 0xee, 0x37, 0x00,
+	0x00, 0xff, 0xff, 0xa5, 0xd8, 0x04, 0x88, 0x06, 0x02, 0x00, 0x00,
 }
diff --git a/protos/peer/configuration.proto b/protos/peer/configuration.proto
index 4c201088d..54f90b665 100644
--- a/protos/peer/configuration.proto
+++ b/protos/peer/configuration.proto
@@ -38,6 +38,18 @@ message AnchorPeer {
 
 }
 
+// Endorsers simply represents list of endorsing peers which is used in ConfigurationItem
+message Endorsers {
+    repeated Endorser endorsers = 1;
+}
+
+// Endorser message structure which provides information about endorser, it includes host address.
+message Endorser {
+
+    // DNS host name of the endorser
+    string address = 1;
+}
+
 // APIResource represents an API resource in the peer whose ACL
 // is determined by the policy_ref field
 message APIResource {
